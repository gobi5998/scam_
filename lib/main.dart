import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:security_alert/provider/scam_report_provider.dart';
import 'package:security_alert/screens/menu/feedbackPage.dart';
import 'package:security_alert/screens/menu/profile_page.dart';
import 'package:security_alert/screens/menu/ratepage.dart';
import 'package:security_alert/screens/menu/shareApp.dart';
import 'package:security_alert/screens/menu/theard_database.dart';
import 'package:security_alert/screens/scam/scam_report_service.dart';
import 'package:security_alert/screens/scam/report_scam_1.dart';
import 'package:security_alert/screens/malware/report_malware_1.dart';
import 'package:security_alert/screens/Fraud/ReportFraudStep1.dart';

import 'package:security_alert/screens/subscriptionPage/subscription_plans_page.dart';

import 'package:shared_preferences/shared_preferences.dart';
import 'package:security_alert/provider/auth_provider.dart';
import 'package:security_alert/provider/dashboard_provider.dart';
import 'package:security_alert/screens/SplashScreen.dart';
import 'package:security_alert/screens/dashboard_page.dart';
import 'package:security_alert/screens/login.dart';
import 'package:security_alert/services/biometric_service.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'dart:async';
import 'models/scam_report_model.dart'; // ‚úÖ Make sure this file contains: part 'scam_report_model.g.dart';
import 'models/fraud_report_model.dart'; // at the top, if not already present
import 'models/malware_report_model.dart';
import 'models/report_model.dart';
import 'screens/Fraud/fraud_report_service.dart';
import 'screens/malware/malware_report_service.dart';
import 'services/report_update_service.dart';
import 'services/app_version_service.dart';
import 'services/api_service.dart';
import 'services/auth_api_service.dart';
import 'services/dio_service.dart';
import 'services/token_storage.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Hive.initFlutter();

  Hive.registerAdapter(ScamReportModelAdapter());
  Hive.registerAdapter(FraudReportModelAdapter());
  Hive.registerAdapter(MalwareReportModelAdapter());
  // Hive.registerAdapter(ReportModelAdapter()); // Will be generated by build_runner

  // Open Hive boxes with error handling for corrupted databases
  print('üì¶ Opening Hive boxes...');

  try {
    await Hive.openBox<ScamReportModel>('scam_reports');
    print('‚úÖ Scam reports box opened successfully');
  } catch (e) {
    print('‚ùå Error opening scam_reports box: $e');
    print('üßπ Clearing corrupted scam_reports box...');
    await Hive.deleteBoxFromDisk('scam_reports');
    await Hive.openBox<ScamReportModel>('scam_reports');
    print('‚úÖ Scam reports box recreated successfully');
  }

  try {
    await Hive.openBox<FraudReportModel>('fraud_reports');
    print('‚úÖ Fraud reports box opened successfully');
  } catch (e) {
    print('‚ùå Error opening fraud_reports box: $e');
    print('üßπ Clearing corrupted fraud_reports box...');
    await Hive.deleteBoxFromDisk('fraud_reports');
    await Hive.openBox<FraudReportModel>('fraud_reports');
    print('‚úÖ Fraud reports box recreated successfully');
  }

  try {
    await Hive.openBox<MalwareReportModel>('malware_reports');
    print('‚úÖ Malware reports box opened successfully');
  } catch (e) {
    print('‚ùå Error opening malware_reports box: $e');
    print('üßπ Clearing corrupted malware_reports box...');
    await Hive.deleteBoxFromDisk('malware_reports');
    await Hive.openBox<MalwareReportModel>('malware_reports');
    print('‚úÖ Malware reports box recreated successfully');
  }

  // Check existing data
  final scamBox = Hive.box<ScamReportModel>('scam_reports');
  final fraudBox = Hive.box<FraudReportModel>('fraud_reports');
  final malwareBox = Hive.box<MalwareReportModel>('malware_reports');

  print('üìä Existing data on startup:');
  print('üìä - Scam reports: ${scamBox.length}');
  print('üìä - Fraud reports: ${fraudBox.length}');
  print('üìä - Malware reports: ${malwareBox.length}');

  // Update existing reports with keycloakUserId
  await ReportUpdateService.updateAllExistingReports();

  // Initialize app version service
  await AppVersionService.initialize();

  // DioService interceptors are automatically set up in the constructor
  // No need to call AuthApiService.setupInterceptors() anymore

  // Test the interceptor functionality
  print('üß™ Testing interceptor functionality...');
  try {
    await DioService().testInterceptor();
  } catch (e) {
    print('‚ùå Interceptor test failed: $e');
  }

  // NUCLEAR DUPLICATE REMOVAL - Clear everything and start fresh
  print('‚ò¢Ô∏è NUCLEAR DUPLICATE CLEANUP ON APP STARTUP...');

  // TARGETED DUPLICATE REMOVAL - One time only on startup
  print('üîç Running targeted duplicate removal on startup...');
  try {
    // Remove duplicates from local storage
    await ScamReportService.removeDuplicateScamReports();
    await FraudReportService.removeDuplicateFraudReports();

    // Remove duplicates from backend (only if online)
    final startupConnectivity = await Connectivity().checkConnectivity();
    if (startupConnectivity != ConnectivityResult.none) {
      await ApiService().removeDuplicateScamFraudReports();
    }
    print('‚úÖ Startup duplicate removal completed');
  } catch (e) {
    print('‚ùå Error during startup duplicate removal: $e');
  }

  // Initial sync if online
  final initialConnectivity = await Connectivity().checkConnectivity();
  if (initialConnectivity != ConnectivityResult.none) {
    print('Initial sync: Syncing reports on app start...');

    try {
      await ScamReportService.syncReports();
      print('Initial sync: Scam reports synced');
    } catch (e) {
      print('Initial sync: Error syncing scam reports: $e');
    }

    try {
      await FraudReportService.syncReports();
      print('Initial sync: Fraud reports synced');
    } catch (e) {
      print('Initial sync: Error syncing fraud reports: $e');
    }

    try {
      await MalwareReportService.syncReports();
      print('Initial sync: Malware reports synced');
    } catch (e) {
      print('Initial sync: Error syncing malware reports: $e');
    }
  }

  // Set up periodic sync (every 30 minutes when online) - reduced frequency
  Timer.periodic(const Duration(minutes: 30), (timer) async {
    final connectivity = await Connectivity().checkConnectivity();
    if (connectivity != ConnectivityResult.none) {
      print('Periodic sync: Syncing reports...');

      try {
        await ScamReportService.syncReports();
        print('Periodic sync: Scam reports synced');
      } catch (e) {
        print('Periodic sync: Error syncing scam reports: $e');
      }

      try {
        await FraudReportService.syncReports();
        print('Periodic sync: Fraud reports synced');
      } catch (e) {
        print('Periodic sync: Error syncing fraud reports: $e');
      }

      try {
        await MalwareReportService.syncReports();
        print('Periodic sync: Malware reports synced');
      } catch (e) {
        print('Periodic sync: Error syncing malware reports: $e');
      }
    }
  });

  // Track if we've already cleaned up to prevent continuous execution
  bool hasCleanedUp = false;

  Connectivity().onConnectivityChanged.listen((result) async {
    if (result != ConnectivityResult.none && !hasCleanedUp) {
      print(
        'Internet connection restored, cleaning duplicates and syncing reports...',
      );

      hasCleanedUp = true; // Prevent multiple executions

      // Then sync reports
      try {
        await ScamReportService.syncReports();
        print('Scam reports synced successfully');
      } catch (e) {
        print('Error syncing scam reports: $e');
      }

      try {
        await FraudReportService.syncReports();
        print('Fraud reports synced successfully');
      } catch (e) {
        print('Error syncing fraud reports: $e');
      }

      try {
        await MalwareReportService.syncReports();
        print('Malware reports synced successfully');
      } catch (e) {
        print('Error syncing malware reports: $e');
      }
    }
  });

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProvider(create: (_) => DashboardProvider()),
        ChangeNotifierProvider(create: (_) => ScamReportProvider()),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      // home: const SplashScreen(),
      initialRoute: '/',
      routes: {
        '/': (context) => const AuthWrapper(), // Use AuthWrapper for auto-login
        '/profile': (context) => ProfilePage(),
        '/thread': (context) => ThreadDatabaseFilterPage(),
        '/subscription': (context) => SubscriptionPlansPage(),
        '/rate': (context) => Ratepage(),
        '/share': (context) => Shareapp(),
        '/feedback': (context) => Feedbackpage(),
        '/splashScreen': (context) => SplashScreen(),
        '/scam-report': (context) => ReportScam1(categoryId: 'scam_category'),
        '/malware-report': (context) =>
            ReportMalware1(categoryId: 'malware_category'),
        '/fraud-report': (context) =>
            ReportFraudStep1(categoryId: 'fraud_category'),
      },
    );
  }
}

class SplashToAuth extends StatefulWidget {
  const SplashToAuth({super.key});

  @override
  State<SplashToAuth> createState() => _SplashToAuthState();
}

class _SplashToAuthState extends State<SplashToAuth> {
  bool _showAuthWrapper = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(const Duration(seconds: 2), () {
      setState(() {
        _showAuthWrapper = true;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return _showAuthWrapper ? const AuthWrapper() : const SplashScreen();
  }
}

class AuthWrapper extends StatefulWidget {
  const AuthWrapper({super.key});

  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> {
  bool _authChecked = false;
  bool _biometricChecked = false;
  bool _biometricPassed = false;
  bool _autoLoginAttempted = false;

  @override
  void initState() {
    super.initState();
    _initializeAuth();
  }

  Future<void> _initializeAuth() async {
    try {
      print('üîê Initializing auto-login with biometric authentication...');
      
      // Check if user has enabled biometric authentication
      final prefs = await SharedPreferences.getInstance();
      final bioEnabled = prefs.getBool('biometric_enabled') ?? false;
      final autoLoginEnabled = prefs.getBool('auto_login_enabled') ?? true; // Default to true
      
      print('üîê Biometric enabled: $bioEnabled');
      print('üîê Auto-login enabled: $autoLoginEnabled');

      if (autoLoginEnabled) {
        // Try to get stored tokens
        final accessToken = await TokenStorage.getAccessToken();
        final refreshToken = await TokenStorage.getRefreshToken();
        
        print('üîê Stored access token: ${accessToken != null ? 'Present' : 'Not present'}');
        print('üîê Stored refresh token: ${refreshToken != null ? 'Present' : 'Not present'}');

        if (accessToken != null && refreshToken != null) {
          print('üîê Tokens found, attempting auto-login...');
          
          // Try to validate the token by calling /api/user/me
          try {
            final apiService = ApiService();
            final userResponse = await apiService.get('api/user/me');
            
            if (userResponse.statusCode == 200 && userResponse.data != null) {
              print('üîê ‚úÖ Auto-login successful - User validated via /api/user/me');
              
              // Update auth provider with user data
              final authProvider = Provider.of<AuthProvider>(context, listen: false);
              await authProvider.setUserData(userResponse.data);
              
              // If biometric is enabled, check biometric authentication
              if (bioEnabled) {
                print('üîê Biometric enabled, checking biometric authentication...');
                await _checkBiometrics(authProvider);
              } else {
                print('üîê Biometric disabled, proceeding to dashboard...');
                setState(() {
                  _biometricPassed = true;
                  _authChecked = true;
                });
              }
            } else {
              print('üîê ‚ùå Auto-login failed - Invalid token response');
              await _handleAutoLoginFailure();
            }
          } catch (e) {
            print('üîê ‚ùå Auto-login failed - API error: $e');
            await _handleAutoLoginFailure();
          }
        } else {
          print('üîê No stored tokens found, showing login page');
          await _handleAutoLoginFailure();
        }
      } else {
        print('üîê Auto-login disabled, showing login page');
        await _handleAutoLoginFailure();
      }
    } catch (e) {
      print('üîê Error during auto-login initialization: $e');
      await _handleAutoLoginFailure();
    }
  }

  Future<void> _handleAutoLoginFailure() async {
    print('üîê Handling auto-login failure...');
    
    // Clear any invalid tokens
    await TokenStorage.clearAllTokens();
    
    // Reset auth provider
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    await authProvider.logout();
    
    setState(() {
      _authChecked = true;
      _biometricPassed = false;
    });
  }

  Future<void> _checkBiometrics(AuthProvider authProvider) async {
    if (!_biometricChecked && authProvider.isLoggedIn) {
      try {
        print('üîê Checking biometric availability...');
        final isAvailable = await BiometricService.isBiometricAvailable();
        
        if (isAvailable) {
          print('üîê Biometric available, requesting authentication...');
          _biometricChecked = true;
          
          final passed = await BiometricService.authenticateWithBiometrics();
          print('üîê Biometric authentication result: $passed');
          
          if (!passed) {
            print('üîê Biometric authentication failed, logging out...');
            await authProvider.logout();
            await TokenStorage.clearAllTokens();
          }
          
          setState(() {
            _biometricPassed = passed;
            _authChecked = true;
          });
        } else {
          print('üîê Biometric not available, proceeding to dashboard...');
          setState(() {
            _biometricChecked = true;
            _biometricPassed = true;
            _authChecked = true;
          });
        }
      } catch (e) {
        print('üîê Biometric check error: $e');
        setState(() {
          _biometricChecked = true;
          _biometricPassed = true;
          _authChecked = true;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<AuthProvider>(
      builder: (context, authProvider, child) {
        print(
          'üîê AuthWrapper build - authChecked: $_authChecked, isLoading: ${authProvider.isLoading}, isLoggedIn: ${authProvider.isLoggedIn}, biometricPassed: $_biometricPassed',
        );

        if (!_authChecked || authProvider.isLoading) {
          return const SplashScreen();
        }

        if (authProvider.isLoggedIn && _biometricPassed) {
          print('üîê User authenticated and biometric passed, navigating to dashboard');
          return const DashboardPage();
        }

        print('üîê User not authenticated or biometric failed, showing login page');
        return const LoginPage();
      },
    );
  }
}
