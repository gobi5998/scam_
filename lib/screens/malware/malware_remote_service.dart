import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';
import '../../config/api_config.dart';
import '../../models/malware_report_model.dart';
import '../../services/malware_reference_service.dart';

class MalwareRemoteService {
  Future<bool> sendReport(
    MalwareReportModel report, {
    List<File>? screenshots,
    List<File>? documents,
  }) async {
    try {
      final url = Uri.parse(
        '${ApiConfig.reportsBaseUrl}${ApiConfig.malwareReportsEndpoint}',
      );


      // Create multipart request for file uploads
      var request = http.MultipartRequest('POST', url);

      // Add basic report data
      request.fields['reportId'] = report.id;
      request.fields['malwareType'] = report.malwareType;
      request.fields['infectedDeviceType'] = report.infectedDeviceType;
      request.fields['operatingSystem'] = report.operatingSystem;
      request.fields['detectionMethod'] = report.detectionMethod;
      request.fields['location'] = report.location;
      request.fields['name'] = report.name;
      request.fields['systemAffected'] = report.systemAffected;
      request.fields['alertSeverityLevel'] = report.alertSeverityLevel;
      request.fields['fileName'] = report.fileName;
      request.fields['date'] = report.date.toIso8601String();

      // Add screenshots
      if (screenshots != null && screenshots.isNotEmpty) {
        for (int i = 0; i < screenshots.length; i++) {
          final file = screenshots[i];
          final stream = http.ByteStream(file.openRead());
          final length = await file.length();
          final multipartFile = http.MultipartFile(
            'screenshots',
            stream,
            length,
            filename: 'screenshot_$i.jpg',
          );
          request.files.add(multipartFile);
        }
      }

      // Add documents
      if (documents != null && documents.isNotEmpty) {
        for (int i = 0; i < documents.length; i++) {
          final file = documents[i];
          final stream = http.ByteStream(file.openRead());
          final length = await file.length();
          final multipartFile = http.MultipartFile(
            'documents',
            stream,
            length,
            filename: file.path.split('/').last,
          );
          request.files.add(multipartFile);
        }
      }




      final response = await request.send();
      final responseBody = await response.stream.bytesToString();




      if (response.statusCode == 200 || response.statusCode == 201) {

        return true;
      } else {
        print(
          '❌ Failed to send malware report. Status: ${response.statusCode}, Body: $responseBody',
        );
        return false;
      }
    } catch (e) {

      return false;
    }
  }

  Future<List<MalwareReportModel>> fetchReports() async {
    try {
      final url = Uri.parse(
        '${ApiConfig.reportsBaseUrl}${ApiConfig.malwareReportsEndpoint}',
      );
      final response = await http.get(url);
      if (response.statusCode == 200) {
        List data = jsonDecode(response.body);
        return data
            .map(
              (e) => MalwareReportModel(
                id:
                    e['_id'] ??
                    e['id'] ??
                    DateTime.now().millisecondsSinceEpoch.toString(),
                malwareType: e['malwareType'] ?? '',
                infectedDeviceType: e['infectedDeviceType'] ?? '',
                operatingSystem: e['operatingSystem'] ?? '',
                detectionMethod: e['detectionMethod'] ?? '',
                location: e['location'] ?? '',
                fileName: e['fileName'] ?? '',
                name: e['name'] ?? '',
                systemAffected: e['systemAffected'] ?? '',
                alertSeverityLevel: e['alertSeverityLevel'] ?? '',
                date: DateTime.tryParse(e['date'] ?? '') ?? DateTime.now(),
                isSynced: true,
              ),
            )
            .toList();
      } else {
        print(
          'Failed to fetch malware reports. Status: ${response.statusCode}',
        );
        return [];
      }
    } catch (e) {

      return [];
    }
  }

  Future<bool> submitMalwareReport(Map<String, dynamic> reportData) async {
    try {
      // Initialize reference service if not already done
      if (!MalwareReferenceService.isInitialized) {
        await MalwareReferenceService.initialize();
      }

      // Get required IDs from backend (only category and type)
      final reportCategoryId =
          MalwareReferenceService.getMalwareReportCategoryId();
      final reportTypeId = MalwareReferenceService.getMalwareReportTypeId();

      // Use hardcoded ObjectIds for device types, detection types, and OS
      // since these endpoints don't exist on the backend
      final deviceTypeId = '687616edc688f12536d1d2d5'; // Default device type ID
      final detectTypeId =
          '68761767c688f12536d1d2dd'; // Default detection type ID
      final operatingSystemId = '6875f41f652eaccf5ecbe6b2'; // Default OS ID

      // Validate that required IDs are available
      if (reportCategoryId.isEmpty || reportTypeId.isEmpty) {




        return false;
      }








      // Transform the report data to match backend structure from your image
      final transformedData = {
        "reportCategoryId": reportCategoryId,
        "reportTypeId": reportTypeId,
        "alertLevels": (reportData['alertSeverityLevel'] ?? 'low')
            .toString()
            .toLowerCase(),
        "keycloackUserId": reportData['keycloackUserId'] ?? "",
        "deviceTypeId": deviceTypeId,
        "detectTypeId": detectTypeId,
        "operatingSystemName": operatingSystemId,
        "location": reportData['location'] ?? "",
        "attackName": reportData['name'] ?? "Malware Report",
        "attackSystem": reportData['systemAffected'] ?? "",
        "fileName": reportData['fileName'] ?? "",
        "createdBy": "user", // Add createdBy field
      };

      final response = await http.post(
        Uri.parse(
          '${ApiConfig.reportsBaseUrl}${ApiConfig.malwareReportsEndpoint}',
        ),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode(reportData),
      );




      return response.statusCode == 200 || response.statusCode == 201;
    } catch (e) {

      return false;
    }
  }
}
